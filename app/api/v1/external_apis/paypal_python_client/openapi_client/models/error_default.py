# coding: utf-8

"""
    Transaction Search

    Use the Transaction Search API to get the history of transactions for a PayPal account. To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>. For more information about the API, see the <a href=\"/docs/transaction-search/\">Transaction Search API Integration Guide</a>.<blockquote><strong>Note:</strong> To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>.</blockquote>

    The version of the OpenAPI document: 1.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.error400 import Error400
from openapi_client.models.error401 import Error401
from openapi_client.models.error403 import Error403
from openapi_client.models.error404 import Error404
from openapi_client.models.error409 import Error409
from openapi_client.models.error415 import Error415
from openapi_client.models.error422 import Error422
from openapi_client.models.error500 import Error500
from openapi_client.models.error503 import Error503
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

ERRORDEFAULT_ONE_OF_SCHEMAS = ["Error400", "Error401", "Error403", "Error404", "Error409", "Error415", "Error422", "Error500", "Error503"]

class ErrorDefault(BaseModel):
    """
    The default error response.
    """
    # data type: Error400
    oneof_schema_1_validator: Optional[Error400] = None
    # data type: Error401
    oneof_schema_2_validator: Optional[Error401] = None
    # data type: Error403
    oneof_schema_3_validator: Optional[Error403] = None
    # data type: Error404
    oneof_schema_4_validator: Optional[Error404] = None
    # data type: Error409
    oneof_schema_5_validator: Optional[Error409] = None
    # data type: Error415
    oneof_schema_6_validator: Optional[Error415] = None
    # data type: Error422
    oneof_schema_7_validator: Optional[Error422] = None
    # data type: Error500
    oneof_schema_8_validator: Optional[Error500] = None
    # data type: Error503
    oneof_schema_9_validator: Optional[Error503] = None
    actual_instance: Optional[Union[Error400, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503]] = None
    one_of_schemas: List[str] = Field(default=Literal["Error400", "Error401", "Error403", "Error404", "Error409", "Error415", "Error422", "Error500", "Error503"])

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ErrorDefault.model_construct()
        error_messages = []
        match = 0
        # validate data type: Error400
        if not isinstance(v, Error400):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error400`")
        else:
            match += 1
        # validate data type: Error401
        if not isinstance(v, Error401):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error401`")
        else:
            match += 1
        # validate data type: Error403
        if not isinstance(v, Error403):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error403`")
        else:
            match += 1
        # validate data type: Error404
        if not isinstance(v, Error404):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error404`")
        else:
            match += 1
        # validate data type: Error409
        if not isinstance(v, Error409):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error409`")
        else:
            match += 1
        # validate data type: Error415
        if not isinstance(v, Error415):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error415`")
        else:
            match += 1
        # validate data type: Error422
        if not isinstance(v, Error422):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error422`")
        else:
            match += 1
        # validate data type: Error500
        if not isinstance(v, Error500):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error500`")
        else:
            match += 1
        # validate data type: Error503
        if not isinstance(v, Error503):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Error503`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ErrorDefault with oneOf schemas: Error400, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ErrorDefault with oneOf schemas: Error400, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Error400
        try:
            instance.actual_instance = Error400.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error401
        try:
            instance.actual_instance = Error401.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error403
        try:
            instance.actual_instance = Error403.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error404
        try:
            instance.actual_instance = Error404.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error409
        try:
            instance.actual_instance = Error409.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error415
        try:
            instance.actual_instance = Error415.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error422
        try:
            instance.actual_instance = Error422.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error500
        try:
            instance.actual_instance = Error500.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Error503
        try:
            instance.actual_instance = Error503.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ErrorDefault with oneOf schemas: Error400, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ErrorDefault with oneOf schemas: Error400, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Error400, Error401, Error403, Error404, Error409, Error415, Error422, Error500, Error503]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


